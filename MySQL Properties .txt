spring.application.name=springCRUD

# MySQL Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/employeedb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root

# JDBC Driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate Properties (for JPA)
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update  
spring.jpa.show-sql= true 
spring.jpa.properties.hibernate.format_sql=true






































package com.example.demo;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RequestMapping("/jsp")
@RestController
public class EmployeeCotoller {
  
  @Autowired
  private EmployeeRepository er;

  
  @PostMapping("/employee")
  public String saveEmp(@RequestBody Employee e) {
    return "Employee Record Saved";
  }
  
  
  
  @GetMapping("/employee")
  public List<Employee> getAllEmployee() {
    return er.findAll();
  }
  
  
  
  @GetMapping("/employee{id}")
  public Employee getEmp(@PathVariable int id) {
    Optional<Employee> opt =er.findById(id);
    if(opt.isPresent()) {
      return opt.get();
    }
    else return null;
  }


  
  @PutMapping("/updemployee")
  public String UpdateEmp(@RequestBody Employee em) {
    er.save(em);
    return "Record Saved / Updated!";
  }
  
  
  
  @DeleteMapping("/delemployee{id}")
  public String delEmp(@PathVariable int id) {
    Optional<Employee> opt =er.findById(id);
    if(opt.isPresent()) {
      er.delete(opt.get());
      return "Record Deleted";
    }
    else return "Record Not Found!";
  }
  

}
